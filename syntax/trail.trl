// all spaces a significant
// all types deduced automatically
a = 5
b = a + 1
assert(b == 6) // assert function call for unit testing
assert(
  b == 6 // multiline function call doesn't have closing bracket controls over indentation

// list of declarations
a1, a2 = 5
b1, b2, b3 = 1, 2, 3
c1, c2 = b2, b1

// constant names can be dashed and it is default naming style
some-const = 10

// type constructors (functions)
assert(int(5) == 5)
// assert(true == !false) // error, by default equalities for booleans should be replaced with "is" operator (see below)

// all types is initialized by their default value
assert(int() == 0)

// ??? "instance of" operator returns suitabillity of values for types
assert(5 iof any)
assert(5 iof num)
assert(5 iof int)
assert(5 iof 5) // values is also restrictive types
assert(int iof num)
assert(bool(1) iof true)
assert(false.iof(true) is false)

// is operator checks reference types objects for equality of their references
// functions is also reference types

// "type of" operator returns constructor function
assert(tof(5) is int)

// a = 7 // error, a is immutable
d = _ // later binding (same as d = und())

// log(d) // const can not be used before later redefinishion or can not be redefined if used

if system.os == WINDOWS \
  d = 10 // later binding, d is also immutable
else \
  d = 20 // later binding, d is also immutable

d = d + 10 // const can be used if used to redefine itself before any other usage

// print
out(10)

// code block with indent
\
  a = 10
  assert(a == 10)

// code block can return
c = \
  z = 10
  => z ^^ 2 // => is return statement
assert(c == 100)

// functions is return statements with arguments on the left size
foo = a, b => \
  // a = 5 // error, all arguments are immutable
  => a + b

bar = a, b => a + b
zar = _ => 3 // use "_" if function has no arguments
zar2 = zar // functions are reference type values
assert(foo(1, 2) == bar(2, 1) and bar(2, 1) == zar2())

// is the same as:
assert(
  \
    a = foo(1, 2)
    => a == bar(2, 1) and a == zar2()

// is the same as:
assert(\ // two open blocks in one line can be nested with only one indent
  a = foo(1, 2)
  => a == bar(2, 1) and a == zar2()

c = _ => log('c called')

c = (_ => 5)() // anonymous function call
assert(c == 5)

// code block is the short hand for in place executed function without arguments
_ => |
  a = 10
  assert(a == 10)
()

// same as
|
  a = 10
  assert(a == 10)

// functions creates closures
make-add-one-fn = val => _ => val + 1
add-one = make-add-one-fn(5)
assert(add-one() == 6)

// code block also creates closure
zero = |
  i = 0
  => _ => i

assert(zero() == 0)

// functions can return list of values
swap = a, b => b, a
sa, sb = swap(2, 1) // list of values can be destructured
assert(sa, sb == 1, 2) // operators can work with list of values
assert(sa, sb < 3) // list of values and one value are also supported

// Unified function call syntax (UFCS)
func = a => a + 1
assert(func(a) == a.func() == a.func) // brackets can be omitted when only UFCS is used and function has no side effects

fun = a, b => a + b
assert(fun(a, b) == a.fun(b))

// 5.out // will error because out makes side effect
assert((a => a + 1)(5) == 6)
// assert(5.(a => a + 1) == 6) // error UFCS can be used only with constant name 
// assert(5.(a => a + 1)() == 6) // error UFCS can be used only with constant name

// Replace unified function call syntax (RUFCS)
c = 3
func3 = a, b => a * b
c!func3(3) // sugar for c = c.func3(3)
assert(c == 6)

b = a(5) or 10

// RUFCS syntax "eats" first value in return list, but leaves rest
assert(c!func3(3) iof und)
func4 = a => a, a + 1
assert(c!func4 == 7)

// RUFCS can be used only for redefining constants before they were used

// for every operator exists corresponding function (operators is only syntax sugar for calling corresponding function)
assert(sub(1, 2) == 1 - 2)
assert(le(1, 2))

// python style comparison
assert((a == +a == b - 1 <= b > 0) == true)

// input
d = inp()
assert(d.tof is tof(d) is str)

// type conversion (type constructor)
assert(int('10') == 10)
assert(str(10) == '10')

// availablility operator
assert(0? is true)
assert(''? is true)
assert(sub? is true)
assert(und()? is false)

e = int.inp() // can be und
if e? // availability operator
then assert(e.tof is int)
else assert(e.tof is und)

if e? then |
  assert(e.tof is int)
else |
  assert(e.tof is und)

// if can also return value (ternary operator)
c = if e? then |
  => e
else |
  => 0

c = if e? then e else 0

c = if a == 0 then 5
  elif a == 1 then 3
  else 1

// supply value if undefined operator :)
c = e ?? 0

assert(tof(int.inp() ?? 0) is int)

// arrays
// array type modifiers automatically deduced
// all modifying methods returns copy of original array in first value in return list
tuple = [ 1, 'string' ] // static array of type 1 or 'string'
t1 = [] // is is the same, because of all operations can be done at compilation time
theSameTuple!push(1)
theSameTuple!push('string')
// if code will have dynamic parts with appending dynamic types, tuple will be dynamic array of dynamic types
// if code will have dynamic parts with appending same type, it will be dynamic array of that type

arr = [ 1, 2, 3 ]
assert(arr.len == 3)
assert(arr.push(0) == [ 1, 2, 3, 0 ])
assert(arr == [ 1, 2, 3 ]) // arrays are immutable and can only be redefined as constants with atomic types
arr!push(4)
arr!append([ 5, 6 ])
assert(arr!pop())
assert(arr!pop-last() == 6)
assert(arr!pop-first == 0)
assert(arr == [ 2, 3, 4, 5 ]) // it also will be static array of integers (equality by content values)
assert(not arr.empty)

// all dynamic arrays are slices - pointers from start element to end element
// there is slice operator arr[from..to]

arr2 = arr[1..3]
arr[1] == 5
assert(arr2 == [ 5, 3 ] == arr[1..len]) // len - sugar for arr.len
assert(arr2 == [ 5, 3 ] == arr[1...last]) // last - sugar for arr.last
assert(arr[0...2] == arr[fist..3]) // first is sugar for arr.first

// sequence generators
assert([0..3] == [ 0, 1, 2 ])
assert([3..0] == [ 3, 2, 1 ])
assert([0...32, 8] == [ 0, 8, 16, 24, 32 ])

// cicles
// there is no cicle operators, only recusive function calls
\ self = i => \
    out(i)
    if i < 10 then self(i + 1) else 0
  self(0)

// default collection functions
for = arr, iter => \
  loop = slice, index => \
    if slice.empty then => _
    sliced, item = slice.popFront
    iter(item, index)
    loop(sliced, index + 1)
  loop(arr, 0)

map = arr, iter => \
  res = []
  loop = slice, index => \
    if slice.empty then => _
    sliced, item = slice.popFront
    res.push(iter(item, index))
    loop(sliced, index + 1)
  loop(arr, 0)
  => res

filter = arr, iter => {
  res = []
  loop = slice, index => {
    if slice.empty then => _
    sliced, item = slice.popFront
    if iter(item, index) then res.push(item)
    loop(sliced, index + 1)
  loop(arr, 0)
  => res

// anonymous objects or structures. members a mutable by default
obj = {
  a = 1
  b = 'string'

obj2 = { a = 1, b = .a } // self operator
assert(obj2.a == obj2.b)

// spread operator, destructuring and so on, imports, exports
import Type, { ...methods } from './methods'
export some { a = 1 }
export fun = a => a + 1

// objects destructuring
\
  { a, b } = obj
  assert(a == 1 and b == 'string')

// variadic function parameters
f = a, b, ...rest => a + b + rest.reduce(+)
assert(f(1, 2, 3, 4) == 10)

// function parameters destructuring
f2 = a, { b, c = z } => a + b + z
assert(f2(1, { b = 2, c = 3 }) == 6)
